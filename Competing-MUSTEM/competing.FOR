************************************************************************
*	競合ハザードモデル
*	非斉次マルコフVer.
*	間違い修正済み	
************************************************************************
	MODULE VARIABLE
		INTEGER,PARAMETER:: IMAX=3,LMAX=3,MMAX=3 !劣化ランク、タイプ、特性数
		INTEGER,PARAMETER:: EMAX=9 !実際のレーティング
		!------------------------------------------
!		INTEGER,PARAMETER:: TOTALDATA=10231	!使用データ数
!		INTEGER,PARAMETER:: TOTALDATA=10553	!使用データ数
!		INTEGER,PARAMETER:: TOTALDATA=10235	!使用データ数
!		INTEGER,PARAMETER:: TOTALDATA=785	!使用データ数(narita)
!		INTEGER,PARAMETER:: TOTALDATA=2727	!使用データ数(tonarita)面無し
!		INTEGER,PARAMETER:: TOTALDATA=2751	!使用データ数(tonarita)
!		INTEGER,PARAMETER:: TOTALDATA=2767	!使用データ数(new)
		INTEGER,PARAMETER:: TOTALDATA=2751	!使用データ数inputdata
	!------------------------------------------
		INTEGER,PARAMETER:: TIMEMAX=1	!サンプリング回数
		INTEGER,PARAMETER:: NMAX=IMAX*LMAX		!θの数
		INTEGER,PARAMETER:: dimN=NMAX*MMAX	!連立方程式の数
		INTEGER,PARAMETER:: SAMPLENO=2  !パラメータ推計繰り返し回数
		INTEGER,PARAMETER:: BURNIN=1  !パラメータ推計繰り返し回数
		INTEGER,PARAMETER:: TMAX=2   !観測回数(初期時点を除く)
		REAL*8,PARAMETER:: MYU=0.0   !正規MHの平均(確定的に与える場合)
		REAL*8,PARAMETER:: SIGMA=0.15   !正規MHの分散(確定的に与える場合)


	!---推定パラメータ数を変更したい場合-------------
		INTEGER,PARAMETER:: D1=16	!削除パラメータ数
		INTEGER,PARAMETER:: D2=1	!削除パラメータ数
		INTEGER,PARAMETER:: redimN=dimN-D1	!修正後パラメータ数
		INTEGER DEL(D1)
		INTEGER DEL2(D2)
		
	!削除するパラメータ番号((J-1)*MMAX+M)
!	DATA DEL/6,9,15,18,21,23,26,27/ !削除パラメータ18を入れるべきか
	DATA DEL/2,3,5,6,8,9,12,15,17,18,20,21,23,24,26,27/ !削除パラメータ
!	DATA DEL2/36,2,3,4,6,7,8,14,15,16,18,19,20/ 	!尤度比検定用削除パラメータ
	DATA DEL2/27/ 	!尤度比検定用削除パラメータ
	!------------------------------------------------------
	! フォルダを指定すると回らないので注意！(INTELで)
	!------------------------------------------------------	
		CHARACTER(LEN=30),PARAMETER:: FILE1="input\inputdata.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE2="output\beta1.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE3="output\beta2.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE4="output\beta3.csv"
		CHARACTER(LEN=30),PARAMETER:: FILE100="output\e_life.csv"
		CHARACTER(LEN=13),PARAMETER:: FILE1000="output\df.csv"
		CHARACTER(LEN=17),PARAMETER:: FILE1001="output\beta-t.csv"
		CHARACTER(LEN=17),PARAMETER:: FILE1002="output\hazard.csv"
		CHARACTER(LEN=15),PARAMETER:: FILE1003="output\prob.csv"
		CHARACTER(LEN=16),PARAMETER:: FILE1004="output\delta.csv"
		CHARACTER(LEN=17),PARAMETER:: FILE1005="output\likely.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE1006="output\t-value.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE1007="output\proba.csv"
		CHARACTER(LEN=18),PARAMETER:: FILE1008="output\sampNO.csv"
		CHARACTER(LEN=30),PARAMETER:: FILE1009="output\probable.csv"
	!------------------------------------------------------	
		REAL*8:: THETA(0:IMAX,1:LMAX)		!ハザード関数Θ_i^l ランク最大は０として存在
		REAL*8:: ETA(0:IMAX,0:IMAX,LMAX)		!ハザード関数Θ_i^l ランク最大は０として存在
		REAL*8:: TTHETA(NMAX)		!ハザード関数Θ_i^l ランク最大は０として存在
		REAL*8:: THETAZERO	!健全な状態からのハザード関数
		REAL*8:: LIKELY(D2),SUMLIKELY(D2)	!健全な状態からのハザード関数
	REAL*8,PARAMETER:: FIRSTDELTA=0.01
		INTEGER:: MAXTHETA
		INTEGER:: MAXRHO
		CHARACTER CH
		REAL*8:: OCCU(0:IMAX,LMAX,TOTALDATA,TMAX)	!
		INTEGER:: SAMP(LMAX,0:IMAX,LMAX,TOTALDATA,TMAX)	!完備化した初期状態S_[l]^[ik,lk]
		INTEGER:: SAMPNO(0:IMAX,LMAX,0:IMAX,LMAX,TMAX)	!初期状態のサンプル数
		INTEGER:: SAMPN(0:NMAX)	!初期状態のサンプル数
		INTEGER:: TSAMPN(0:IMAX,LMAX)	!初期状態のサンプル数
	END MODULE
***********************************************************************
*	メインプログラム
***********************************************************************
	PROGRAM ESTIMATION
	USE VARIABLE; IMPLICIT NONE
	REAL*8,EXTERNAL:: PROB,OBJ,GEWEKEZ
	REAL*8:: BETA(1:MMAX,0:IMAX-1,1:LMAX)	!パラメータ
	REAL*8:: SAMPBETA(1:MMAX,0:IMAX-1,1:LMAX,SAMPLENO-BURNIN)
	REAL*8:: ADDBETA(1:MMAX,0:IMAX-1,1:LMAX)	!パラメータ
	REAL*8:: PI(0:IMAX,0:IMAX,LMAX)	!個々の劣化タイプの推移確率
	REAL*8:: PI_IJLM(0:IMAX,LMAX,0:IMAX,LMAX)	!個々のサンプルの推移確率
	REAL*8:: BETAS(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: BETAA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: AVBETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: TBETAA(MMAX,NMAX),ALPHA(MMAX,NMAX)
	REAL*8:: G(dimN,dimN),A(redimN,redimN),OPTOBJ,TESTOBJ,TOKEI,QQ
	REAL*8,PARAMETER:: EPS1=1.0D-08
	REAL*8:: DF2(dimN,dimN)
	REAL*8:: SAMP1(SAMPLENO)
	REAL TV(MMAX)
	REAL Z
	REAL*8:: TOPTBETA(MMAX,NMAX),TBETA(MMAX,NMAX),TBETAS(MMAX,NMAX)
	REAL*8:: OPTBETA(1:MMAX,0:IMAX-1,1:LMAX),ZZ(NMAX*MMAX)
	INTEGER I,J,R,M,TIME,EVAL,L,S,P,Q,IK,LK,TK
	INTEGER W,X,Y,V,TIMER,K,KK,ID,T,TT,DD
	CHARACTER(LEN=30):: hour
	LOGICAL KENTEI
!---------------------------------------------------------
*	乱数の種
	INTEGER IR1,IX,IY,IZ,TANE
	COMMON /IRAND1/IR1
	COMMON /IRAND2/IX,IY,IZ
!---------------------------------------------------------
!	CALL TIME(hour); PRINT *, hour
*	乱数の種
	CALL CLOCK (IR1,2)
	IX=16251; IY=21157; IZ=3583
	TANE=IR1
*----------------------------
*	MH法
*----------------------------

	SAMPNO=100	!完備化用サンプル数初期値
	DO L=1,LMAX
	OCCU(0,L,:,:)=1.0
	END DO


	DO 80 DD=1,D2

      DO 100 KK=1,SAMPLENO
	PRINT*,KK
!	DO L=1,LMAX
!	PRINT*,(TSAMPN(I,L),I=0,IMAX)
!	END DO
!-----初期パラメータβ------------------------------
	OPEN(1001,file=FILE1001)
	READ(1001,*) CH
	DO S=1,NMAX
	READ(1001,*) (TBETA(M,S),M=1,MMAX)
	END DO
	CLOSE(1001)
	CALL TRANSITION_2(TBETA,BETA)
!----------------------------------------------------
!-----完備化ステップ-----------------
!	DO TT=1,TMAX
!	CALL MAKE_OCCU(BETA,TT)
!	END DO
!	OPEN(1008,file=FILE1008)
!	DO L=1,LMAX; DO IK=0,IMAX; DO LK=1,LMAX; DO TK=1,TMAX
!	WRITE(1008,30),(SAMPNO(I,L,IK,LK,TK),I=0,IMAX),L,IK,LK
!	END DO; END DO; END DO; END DO
!	CLOSE(1008)
!-----酔歩過程MH法-----------------
!	CALL NORMAL_MH(BETA,KK,DD)
!------------------------------------
	IF(KK > BURNIN) THEN
	SAMPBETA(:,:,:,KK-BURNIN)=BETA(:,:,:)
	END IF
100   END DO
80	END DO
	LIKELY=SUMLIKELY/(SAMPLENO-BURNIN)
	OPEN(1005,file=FILE1005)
	DO DD=1,D2
	WRITE(1005,15) DD,LIKELY(DD),LIKELY(1)-LIKELY(DD)
	END DO
	CLOSE(1005)
15	FORMAT(1X,I5,",",(F20.8,","),F12.8)


	DO K=1,SAMPLENO-BURNIN
	ADDBETA(:,:,:)=ADDBETA(:,:,:)+SAMPBETA(:,:,:,K)
	END DO
	AVBETA=ADDBETA/(SAMPLENO-BURNIN)
	OPTBETA=AVBETA
*-------------------
*	検定
*-------------------
	CALL TRANSITION_1(OPTBETA,TOPTBETA)
	!ハザード関数・推移確率行列・未知パラメータβ
	CALL PRINT1(OPTBETA,SAMPBETA)
!*********************
*	仮説検定
!*********************
	KENTEI=.TRUE.
!	I=1
		 DO L=1,LMAX;DO J=0,IMAX-1 ; DO M=1,MMAX
			S=LMAX*(L-1)+J+1
			ID=MMAX*(S-1)+M
			DO T=1,SAMPLENO-BURNIN
				SAMP1(T)=SAMPBETA(M,J,L,T)
			END DO
	DO I=1,D1
			IF(DEL(I)==ID) THEN
			 GO TO 18
			END IF
	END DO

			ZZ(ID)= GEWEKEZ(SAMP1,SAMPLENO-BURNIN)
			IF(ZZ(ID) < 1.96) THEN	!５％有意水準
				PRINT *, ID,ZZ(ID), "収束"
			ELSE
				PRINT *, ID,ZZ(ID), "収束せず"
				KENTEI=.FALSE.
			END IF
18	CONTINUE
		END DO; END DO; END DO
 90	FORMAT(1X, I3,1X,F10.2, A12)

30	FORMAT(1X,6(I5,","),I5)

20	FORMAT(1X,2(F12.8,","),F12.8)
	W=OBJ(BETA)
	PRINT*,"対数尤度",W

10	FORMAT(1X,6(F12.8,","),F12.8)
	STOP
	END PROGRAM

*******************************************************
*	正規提案分布によるMHサンプリング法
*******************************************************
	SUBROUTINE NORMAL_MH(BETA,K,DD)
	USE VARIABLE; IMPLICIT NONE
	REAL*8, INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	INTEGER, INTENT(IN):: K
	INTEGER, INTENT(IN):: DD
	REAL*8, EXTERNAL:: OBJ,RANSU1,RSEIKI
	REAL*8:: BETAA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: DBETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: BETAD(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: BETAE(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: POS(1:MMAX,1:NMAX),W,H,LR(MMAX,NMAX)
	REAL*8:: TBETA(1:MMAX,1:NMAX)
	REAL*8:: TBETAA(1:MMAX,1:NMAX)
	REAL*8:: TBETAD(1:MMAX,1:NMAX)
	REAL*8:: OBJE(D2)
	REAL*8:: RNOR	!正規乱数
	REAL*8:: R
	INTEGER:: S,TIME,M,P,Q,S1,M1,D,D22,D222,T,I,L
	REAL*8,PARAMETER:: EPS=1.0D-15
	OBJE=0.0
	CALL TRANSITION_1(BETA,TBETA)
	
	DO 88 T=1,1

!	パラメータ削除ステップ----------------------
	DO D=1,D1; DO S=1,NMAX; DO M=1,MMAX

	IF(MMAX*(S-1)+M==DEL(D))THEN
	TBETA(M,S)=0.0
	END IF
	IF(MMAX*(S-1)+M==DEL2(DD)) THEN
	TBETA(M,S)=0.0
	END IF
	END DO; END DO; END DO
!-------------------------------------------------

	TBETAD=TBETA
	CALL TRANSITION_2(TBETAD,BETAD)

	DO 22 TIME=1,TIMEMAX

	CALL TRANSITION_1(BETAD,TBETAD)

	DO M=1,MMAX; DO S=1,NMAX
	R=RANSU1()
	IF(MMAX*(S-1)+M==DEL2(DD)) GO TO 55

	DO D=1,D1
	IF(MMAX*(S-1)+M==DEL(D)) GO TO 55
	END DO

	RNOR=RSEIKI(MYU,SIGMA)
			TBETAA=TBETAD
			POS=TBETAD
			TBETAA(M,S)=TBETAA(M,S)+RNOR
		CALL TRANSITION_2(TBETAA,BETAA)
		CALL TRANSITION_2(TBETAD,BETAD)
	H=OBJ(BETAD)
			IF(OBJ(BETAA)-H > 0.0) THEN
				POS(M,S)=TBETAA(M,S)
			ELSE IF(OBJ(BETAA)-H > LOG(R)) THEN
				POS(M,S)=TBETAA(M,S)
			ELSE
			END IF
			TBETAD=POS

55	END DO
	END DO

			TBETA=TBETAD

	CALL TRANSITION_2(TBETAD,BETAD)
	OPEN(1001,file=FILE1001)
	WRITE(1001,*) "未知パラメータβ***************"
	DO S=1,NMAX
		WRITE(1001,20) (TBETA(M,S),M=1,MMAX)
	END DO 
	CLOSE(1001)

20	FORMAT(1X,3(F12.8,","),F12.8)
	
	CALL TRANSITION_2(TBETA,BETAD)
	W=OBJ(BETAD)
	DO L=1,LMAX; DO I=0,IMAX-1
	PRINT*,(BETAD(M,I,L),M=1,MMAX)!,I,L
	END DO; END DO
	OBJE(DD)=W
	PRINT*,"対数尤度",W

	IF(K>=BURNIN) SUMLIKELY(DD)=SUMLIKELY(DD)+W

22	END DO
88	END DO
      DBETA=BETA
99	CALL TRANSITION_2(TBETA,DBETA)

	END SUBROUTINE NORMAL_MH

*******************************************
*	θの値を求める
*******************************************
	SUBROUTINE THETAVALUE(IK,JK,LK,XK,BETA)
	USE VARIABLE; IMPLICIT NONE
	REAL*8,INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8,INTENT(IN):: XK(1:MMAX,0:IMAX-1,1:LMAX)
	INTEGER,INTENT(IN):: IK,JK,LK
	INTEGER I,J,L,M,R
	REAL*8 RESERVE,RESERVE2

	!θの計算
	THETA=0.0;RESERVE2=0.0
	DO I=0,IMAX                                 
	DO L=1,LMAX									
		IF(I==IMAX) CYCLE !ランク3は推移強度無し
		DO M=1,MMAX
			THETA(I,L)=THETA(I,L)+XK(M,I,L)*BETA(M,I,L)
		END DO
	THETA(I,L)=EXP(THETA(I,L))
	END DO
	END DO


	!各Θij-Θlrの差(η)
	ETA=0.0
	DO L=1,LMAX
	DO J=0,IMAX; DO I=0,IMAX
		ETA(I,J,L)=THETA(I,L)-THETA(J,L)
	END DO;	END DO
	END DO

	THETAZERO=0.0
	DO L=1,LMAX
	THETAZERO=THETAZERO+THETA(0,L)
	END DO

	END SUBROUTINE THETAVALUE

********************************************************
*	初期時点の占有率
********************************************************
	SUBROUTINE MAKE_OCCU(BETA,TK)
	USE VARIABLE; IMPLICIT NONE
	REAL*8, INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	INTEGER, INTENT(IN):: TK
	REAL*8 XK(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8 TSAMPNL(IMAX+1)
	REAL*8 DOCCU(0:IMAX,LMAX,TOTALDATA,TMAX)
	REAL*8 DOCCUD(0:IMAX,LMAX,TOTALDATA,TMAX)
	REAL*8 DDOCCU(0:IMAX,LMAX,TMAX)	!戻す時用ダミー
	INTEGER DSAMPNO(0:IMAX,LMAX,0:IMAX,LMAX,TMAX)	!初期状態のサンプル数ダミー
	INTEGER I,N,K,M,L
	INTEGER GK,EK,FK,IK,JK,LK,RK,KOUHO
	INTEGER DNMAX	!観測できない劣化ランクの最大値
	INTEGER PRESAMP	!変更前の完備化されたランク
	REAL*8 LIKELY1,LIKELY2	!サンプリング過程用尤度
	REAL*8 PR1(IMAX+1)
	REAL*8 PR(0:IMAX,LMAX)
	REAL*8 ZK1,ZK2,W,WW,RES,PD,RATE
	REAL*8,EXTERNAL:: RANSU1
	REAL*8, EXTERNAL:: PROB
	REAL*8, EXTERNAL:: PROBL
	
!	DO I=0,IMAX; DO N=1,LMAX
!	TSAMPNL(I+1)=TSAMPN(I,N)
!	END DO; END DO
	OPEN(1,file=FILE1)
	READ(1,*) CH

		DSAMPNO=SAMPNO
		SAMPNO=0

	DO 55 K=1,TOTALDATA !データの読み込み
		!２時点間の劣化状態、点検間隔
		READ(1,*) EK,FK,GK,ZK1,ZK2,(XK(M,0,1), M=1,MMAX)
	
	IF(TK==2 .AND. ZK2==0) CYCLE

		DO M=1,MMAX
			XK(M,0,2)=XK(M,0,1)
			XK(M,0,3)=XK(M,0,1)
		END DO
		DO I=1,IMAX-1; DO L=1,LMAX; DO M=1,MMAX
			XK(M,I,L)=XK(M,0,1)
		END DO; END DO; END DO


!--------------------------------------------
!レーティングを劣化ランクとタイプに変換する
!--------------------------------------------
	IF(TK==1) THEN
	
	IF(FK==0)THEN
			JK=0
		ELSE
			RK=MOD(FK+LMAX-1,LMAX)+1
			JK=(FK-RK)/(LMAX)+1
		END IF
	IF(EK==0)THEN !ランク０は特別
			IK=0;LK=RK				!--------------!LK要再考!----------------------
		ELSE
			LK=MOD(EK+LMAX-1,LMAX)+1
			IK=(EK-LK)/(LMAX)+1
	END IF

	ELSE IF(TK==2) THEN
	
	IF(GK==0)THEN
			JK=0
		ELSE
			RK=MOD(GK+LMAX-1,LMAX)+1
			JK=(GK-RK)/(LMAX)+1
		END IF
	IF(FK==0)THEN !ランク０は特別
			IK=0;LK=RK				!--------------!LK要再考!----------------------
		ELSE
			LK=MOD(FK+LMAX-1,LMAX)+1
			IK=(FK-LK)/(LMAX)+1
	END IF

	END IF
!--------------------------------------------
	DO L=1,LMAX
		CALL THETAVALUE(IK,JK,L,XK,BETA)
	END DO

		LIKELY1=PROB(IK,JK,LK,RK,ZK2,K,TK)
	IF(IK==0) THEN	!初期健全度が０の場合-------------------------------
	DO N=1,LMAX
	OCCU(0,N,K,TK)=1.0
	SAMPNO(0,N,0,N,TK)=SAMPNO(0,N,0,N,TK)+1
	SAMP(N,IK,N,K,TK)=IK
	END DO
	GO TO 11
	END IF
					!初期健全度が０以外の場合---------------------------

!--------------------------------------------
!	占有率を求める
!--------------------------------------------
	DDOCCU=0
	DO 77 N=1,LMAX
	IF(LK==N) THEN
	OCCU(IK,LK,K,TK)=1.0
	SAMPNO(IK,N,IK,LK,TK)=SAMPNO(IK,N,IK,LK,TK)+1
	SAMP(N,IK,LK,K,TK)=IK
	GO TO 77
	END IF

	PRESAMP=SAMP(N,IK,LK,K,TK)
!	とり得るランクの最大値を決定
	IF(N > LK) THEN
	DNMAX=IK-1
	ELSE
	DNMAX=IK
	END IF
	DO I=0,DNMAX
	PR(I,N)=PROBL(0,I,N,ZK1)	!要一般化!---------------------------------------
!	PRINT*,PR(I,N),I,N,K
	END DO

!--------------------------------------------
!	PRを確定的に与える場合
	RES=0.0
	PD=0.0

	W=RANSU1()
	WW=RANSU1()

!	DO I=0,DNMAX
!	RES=RES+PR(I,N)
!	END DO
!	DO I=0,DNMAX
!	OCCU(I,N,K,TK)=PR(I,N)/RES !**************************完備化しない用
!	END DO


!*************完備化する場合********************************
			DOCCU(:,N,K,TK)=0.0
			DO I=0,DNMAX
			PD=PD+PR(I,N)/RES
			IF(W <= PD) THEN
			DOCCU(I,N,K,TK)=1.0
			KOUHO=I 
			EXIT
			END IF
			END DO

!-----------完備化更新決定過程-----------------

	DO I=0,DNMAX
	DDOCCU(I,N,TK)=OCCU(I,N,K,TK)	!戻す時用にOCCUを記録
	OCCU(I,N,K,TK)=DOCCU(I,N,K,TK)
	END DO
		LIKELY2=PROB(IK,JK,LK,RK,ZK2,K,TK)

	IF(LIKELY1==0) THEN
	SAMPNO(KOUHO,N,IK,LK,TK)=SAMPNO(KOUHO,N,IK,LK,TK)+1
	SAMP(N,IK,LK,K,TK)=KOUHO
	GO TO 77
	END IF

		RATE=LIKELY2/LIKELY1
	IF(WW <= RATE) THEN
	SAMPNO(KOUHO,N,IK,LK,TK)=SAMPNO(KOUHO,N,IK,LK,TK)+1
	SAMP(N,IK,LK,K,TK)=KOUHO
	GO TO 77
	ELSE
	SAMPNO(PRESAMP,N,IK,LK,TK)=SAMPNO(PRESAMP,N,IK,LK,TK)+1
	SAMP(N,IK,LK,K,TK)=PRESAMP
	DO I=0,DNMAX
	OCCU(I,N,K,TK)=DDOCCU(I,N,TK)	!占有率を戻す
	END DO
	END IF
!*************完備化する場合********************************

77	END DO

11	CONTINUE

55	END DO
!	PRINT*,OCCU

	CLOSE(1)
	RETURN ;END SUBROUTINE
	
****************************************************
*	対数尤度関数 (時間に関しては地道に2回計算※要修正)
****************************************************
	REAL*8 FUNCTION OBJ(BETA)
	USE VARIABLE; IMPLICIT NONE
	REAL*8, EXTERNAL:: PROB
	REAL*8, INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	INTEGER I,J,L,R,K,M !ランク、タイプ、データ数
	INTEGER EK,FK,GK !元レーティング
	INTEGER IK,JK,LK,RK,V,X,Y,TK
	REAL*8:: ZK1,ZK2,Z,W,U
	REAL*8 XK(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8 PI,Q,QQ,AA
	OPEN(1,file=FILE1)
	READ(1,*) CH
	OBJ=0.0
	Q=0.0
	V=0
	L=0
	OPEN(1009,file=FILE1000)
	DO 101 K=1,TOTALDATA !データの読み込み
		!２時点間の劣化状態、点検間隔、特性ベクトル
		READ(1,*) EK,FK,GK,ZK1,ZK2,(XK(M,0,1), M=1,MMAX)


!--------------同一サンプルを省略------------------------------
!	IF(X==EK .AND. Y==FK .AND. Z==ZK .AND. W==XK(2,0,1)
!     & .AND.V==XK(3,0,1) .AND.U==XK(MMAX,0,1)) THEN
!	IF(X==EK .AND. Y==FK .AND. Z==ZK) THEN
!	OBJ=OBJ+QQ
!	GO TO 101
!	END IF
!	X=EK; Y=FK; Z=ZK; !W=XK(2,0,1) 
!	V=XK(3,0,1); U=XK(MMAX,0,1) !説明変数
!--------------------------------------------------------------

		DO M=1,MMAX
			XK(M,0,2)=XK(M,0,1)
			XK(M,0,3)=XK(M,0,1)
		END DO
		DO I=1,IMAX-1; DO L=1,LMAX; DO M=1,MMAX
			XK(M,I,L)=XK(M,0,1)
		END DO; END DO; END DO

!--------------------------------------------
!レーティングを劣化ランクとタイプに変換する(T=1)
!--------------------------------------------
	IF(FK==0)THEN
			JK=0
		ELSE
			RK=MOD(FK+LMAX-1,LMAX)+1
			JK=(FK-RK)/(LMAX)+1
		END IF
	IF(EK==0)THEN !ランク０は特別
			IK=0; LK=RK
		ELSE
			LK=MOD(EK+LMAX-1,LMAX)+1
			IK=(EK-LK)/(LMAX)+1
	END IF
		!θの値
		CALL THETAVALUE(IK,JK,LK,XK,BETA)
		PI=PROB(IK,JK,LK,RK,ZK1,K,1)
		!尤度関数
		IF(PI<=1.0D-305) THEN
			OBJ=OBJ-702.0
		ELSE IF(PI > 1.0000) THEN

	WRITE(1009,20),K,IK,LK,JK,RK,PI

	OBJ=OBJ

	ELSE

		QQ=DLOG(PI)
			OBJ=OBJ+QQ
		END IF

	IF(ZK2==0) CYCLE

!--------------------------------------------
!レーティングを劣化ランクとタイプに変換する(T=2)
!--------------------------------------------
	IF(GK==0)THEN
			JK=0
		ELSE
			RK=MOD(GK+LMAX-1,LMAX)+1
			JK=(GK-RK)/(LMAX)+1
		END IF
	IF(FK==0)THEN !ランク０は特別
			IK=0; LK=RK
		ELSE
			LK=MOD(FK+LMAX-1,LMAX)+1
			IK=(FK-LK)/(LMAX)+1
	END IF
		!θの値
		CALL THETAVALUE(IK,JK,LK,XK,BETA)
		PI=PROB(IK,JK,LK,RK,ZK2,K,2)
		!尤度関数
		IF(PI<=1.0D-305) THEN
			OBJ=OBJ-702.0
!	print*,"q",k
		ELSE IF(PI > 1.0000) THEN

	WRITE(1009,20),K,IK,LK,JK,RK,PI

	OBJ=OBJ

	ELSE

		QQ=DLOG(PI)
			OBJ=OBJ+QQ
		END IF
101	END DO
	CLOSE(1)
	CLOSE(1009)
20	FORMAT(1X,5(I5,","),F12.8)

	RETURN
	END FUNCTION

************************************
*	推移確率の要素π_ij^lr(Z)     #####要チェック#####
************************************
	REAL*8 FUNCTION PROB(IK,JK,LK,RK,ZK,K,TK)
	USE VARIABLE; IMPLICIT NONE
	REAL*8,EXTERNAL:: PROBD
	INTEGER,INTENT(IN):: IK,JK,LK,RK,K,TK
	REAL*8,INTENT(IN):: ZK
	INTEGER J,R
	PROB=1.0
	IF(JK==3 .AND. RK==3)THEN
	IF(IK==0 .AND. LK==0)THEN
	DO J=1,IMAX; DO R=1,LMAX
	IF(J==3 .AND. R==3) CYCLE
	PROB=PROB-PROBD(IK,J,LK,R,ZK,K,TK)
	END DO; END DO
	END IF
	DO J=IK,IMAX; DO R=LK,LMAX
	IF(J==3 .AND. R==3) CYCLE
	PROB=PROB-PROBD(IK,J,LK,R,ZK,K,TK)
	END DO; END DO
	ELSE
	PROB=PROBD(IK,JK,LK,RK,ZK,K,TK)
	END IF
	RETURN
	END FUNCTION

	REAL*8 FUNCTION PROBD(IK,JK,LK,RK,ZK,K,TK)
	USE VARIABLE; IMPLICIT NONE
	REAL*8,EXTERNAL:: PROBL
	INTEGER,INTENT(IN):: IK,JK,LK,RK,K,TK
	REAL*8,INTENT(IN):: ZK
	INTEGER P,Q,N,I,J,KK
	REAL*8 RES1,RES2,RES3,AA
!	REAL*8 RES2	!RK以外の劣化タイプの同時確率
!	REAL*8 RES3	!RKに関する確率

	PROBD=0.0
	RES1=0.0
	RES2=0.0
	RES3=0.0
	AA=0.0
	IF(JK==0) THEN

!	PROB=EXP(-THETAZERO*ZK)
      PROBD=PROBL(0,0,1,ZK)*PROBL(0,0,2,ZK)*PROBL(0,0,3,ZK)

	ELSE IF(IK==0 .AND. JK==1) THEN

	IF (RK==1) THEN
	PROBD=PROBL(0,1,1,ZK)*PROBL(0,0,2,ZK)*PROBL(0,0,3,ZK)
	ELSE IF (RK==2) THEN
	PROBD=(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK))*PROBL(0,1,2,ZK)*PROBL(0,0,3,ZK)
	ELSE IF (RK==3) THEN
	PROBD=(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK))*(PROBL(0,0,2,ZK)+ 
     & PROBL(0,1,2,ZK))*PROBL(0,1,3,ZK)
	END IF
	ELSE IF(IK==0 .AND. JK==2) THEN

	IF (RK==1) THEN
	PROBD=PROBL(0,2,1,ZK)*(PROBL(0,0,2,ZK)+PROBL(0,1,2,ZK))* 
     & (PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==2) THEN
	PROBD=(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK)+PROBL(0,2,1,ZK))
     & *PROBL(0,2,2,ZK)*(PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==3) THEN
	PROBD=(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK)+PROBL(0,2,1,ZK))
     & *(PROBL(0,0,2,ZK)+PROBL(0,1,2,ZK)+PROBL(0,2,2,ZK))
     & *PROBL(0,2,3,ZK)
	END IF
	ELSE IF(IK==0 .AND. JK==3) THEN

	IF (RK==1) THEN
	PROBD=PROBL(0,3,1,ZK)*(1.0-PROBL(0,3,2,ZK))*(1.0-PROBL(0,3,3,ZK))
	ELSE IF (RK==2) THEN
	PROBD=PROBL(0,3,2,ZK)*(1.0-PROBL(0,3,3,ZK))
	ELSE IF (RK==3) THEN
	PROBD=PROBL(0,3,3,ZK)
	END IF


	ELSE IF(IK==1 .AND. JK==1) THEN

	IF(LK==1) THEN

	IF (RK==1) THEN
	PROBD=PROBL(1,1,1,ZK)*PROBL(0,0,2,ZK)*PROBL(0,0,3,ZK)
	ELSE IF (RK==2) THEN
	PROBD=(PROBL(1,1,1,ZK)*PROBL(0,1,2,ZK))*PROBL(0,0,3,ZK)
	ELSE IF (RK==3) THEN
	PROBD=PROBL(1,1,1,ZK)*(PROBL(0,0,2,ZK)+PROBL(0,1,2,ZK)) 
     & *PROBL(0,1,3,ZK)
	END IF

	ELSE IF(LK==2) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	PROBD=(OCCU(0,1,K,TK)*(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK))+OCCU(1,1,K,TK)*
     & PROBL(1,1,1,ZK))*(PROBL(1,1,2,ZK)*PROBL(0,0,3,ZK))
	ELSE IF (RK==3) THEN
	PROBD=(OCCU(0,1,K,TK)*(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK))+OCCU(1,1,K,TK)*
     & PROBL(1,1,1,ZK))*(PROBL(1,1,2,ZK)*PROBL(0,1,3,ZK))
	END IF

	ELSE IF(LK==3) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	PROBD=0.0
	ELSE IF (RK==3) THEN
	PROBD=(OCCU(0,1,K,TK)*(PROBL(0,0,1,ZK)+PROBL(0,1,1,ZK))+
     & OCCU(1,1,K,TK)*PROBL(1,1,1,ZK))*(OCCU(0,2,K,TK)*(PROBL(0,0,2,ZK)
     & +PROBL(0,1,2,ZK))+OCCU(1,2,K,TK)*PROBL(1,1,2,ZK))*PROBL(1,1,3,ZK)
	END IF

	END IF

	ELSE IF(IK==1 .AND. JK==2) THEN

	IF(LK==1) THEN

	IF (RK==1) THEN
	PROBD=PROBL(1,2,1,ZK)*(PROBL(0,0,2,ZK)+PROBL(0,1,2,ZK))*
     &(PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==2) THEN
	PROBD=(PROBL(1,1,1,ZK)+PROBL(1,2,1,ZK))*PROBL(0,2,2,ZK)
     & *(PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==3) THEN
	PROBD=(PROBL(1,1,1,ZK)+PROBL(1,2,1,ZK))*(PROBL(0,0,2,ZK)+ 
     & PROBL(0,1,2,ZK)+PROBL(0,2,2,ZK))*PROBL(0,2,3,ZK)
	END IF

	ELSE IF(LK==2) THEN

	IF (RK==1) THEN
	DO I=0,1
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,2,1,ZK)
	END DO
	PROBD=RES1*PROBL(1,1,2,ZK)*(PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==2) THEN
	DO I=0,1; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	PROBD=RES1*PROBL(1,2,2,ZK)*(PROBL(0,0,3,ZK)+PROBL(0,1,3,ZK))
	ELSE IF (RK==3) THEN
	DO I=0,1; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	PROBD=RES1*(PROBL(1,1,2,ZK)+PROBL(1,2,2,ZK))*PROBL(0,2,3,ZK)
	END IF

	ELSE IF(LK==3) THEN

	IF (RK==1) THEN
	DO I=0,1; DO J=2,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	PROBD=RES1*RES2*PROBL(1,1,3,ZK)
	ELSE IF (RK==2) THEN
	DO I=0,1; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=2,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	PROBD=RES1*RES2*PROBL(1,1,3,ZK)
	ELSE IF (RK==3) THEN
	DO I=0,1; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	PROBD=RES1*RES2*PROBL(1,2,3,ZK)
	END IF

	END IF

	ELSE IF(IK==1 .AND. JK==3) THEN

	IF(LK==1) THEN

	IF(RK==1) THEN
	DO I=0,0; DO J=I,2
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,0; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=PROBL(1,3,1,ZK)*RES2*RES3
	ELSE IF(RK==2) THEN
	DO I=1,1; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=RES1+PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,0; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*PROBL(0,3,2,ZK)*RES3
	ELSE IF (RK==3) THEN
	DO I=1,1; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=RES1+PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,0; DO J=I,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	PROBD=RES1*RES2*PROBL(0,3,3,ZK)

	END IF

	ELSE IF(LK==2) THEN

	IF(RK==1) THEN
	DO I=0,1; DO J=3,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=1,1; DO J=I,2
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,0; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF(RK==2) THEN
	DO I=0,1; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,0; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*PROBL(1,3,2,ZK)*RES3
	ELSE IF (RK==3) THEN
	DO I=0,1; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=1,1; DO J=I,3
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	PROBD=RES1*RES2*PROBL(0,3,3,ZK)

	END IF

	ELSE IF(LK==3) THEN

	IF(RK==1) THEN
	DO I=0,1; DO J=3,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=1,1; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF(RK==2) THEN
	DO I=0,1; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=3,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=1,1; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=0,1; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=1,1; DO J=3,3
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	END IF

	ELSE IF(IK==2 .AND. JK==2) THEN

	IF(LK==1) THEN

	IF (RK==1) THEN
	DO I=0,1; DO J=I,1
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,1
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=PROBL(2,2,1,ZK)*RES2*RES3
	ELSE IF (RK==2) THEN
	DO I=2,2; DO J=2,2
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=RES1+PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=2,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,1
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=2,2; DO J=2,2
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=2,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==2) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	DO I=0,2; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=2,2; DO J=2,2
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,1
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=0,2; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=2,2; DO J=2,2
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=2,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==3) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	PROBD=0.0
	ELSE IF (RK==3) THEN
	DO I=0,2; DO J=I,2
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,2; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=2,2; DO J=2,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	END IF

	ELSE IF(IK==2 .AND. JK==3) THEN

	IF(LK==1) THEN

	IF (RK==1) THEN
	DO I=2,2; DO J=3,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==2) THEN
	DO I=2,2; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=RES1+PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=3,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=2,2; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!問題アリ？？
	RES1=RES1+PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=3,3
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==2) THEN

	IF (RK==1) THEN
	DO I=0,2; DO J=3,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=2,2; DO J=2,2
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3

	ELSE IF (RK==2) THEN
	DO I=0,2; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
!	PRINT*,OCCU(I,1,K,TK),I,J
	END DO;END DO
	DO I=2,2; DO J=3,3
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=0,2; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=2,2; DO J=I,3
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)	!問題アリ？？
	RES2=RES2+PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,1; DO J=3,3
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==3) THEN

	IF (RK==1) THEN
	DO I=0,2; DO J=3,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,2; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=2,2; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==2) THEN
	DO I=0,2; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,2; DO J=3,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=2,2; DO J=I,2
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=0,2; DO J=I,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,2; DO J=I,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=2,2; DO J=3,3
!	RES3=RES3+OCCU(I,3,K)*PROBL(I,J,3,ZK)	!問題アリ？？
	RES3=RES3+PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	END IF

	ELSE IF(IK==3 .AND. JK==3) THEN
	
	IF(LK==1)THEN
	
	IF (RK==1) THEN
	DO I=0,2; DO J=I,2
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,2; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
!	PROB=OCCU(3,1,K,TK)*PROBL(3,3,1,ZK)*RES2*RES3	!OCCU(3,1,K)問題アリ？？
	PROBD=1.0*PROBL(3,3,1,ZK)*RES2*RES3
	ELSE IF (RK==2) THEN
	DO I=3,3; DO J=3,3
	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
	END DO;END DO
	DO I=0,2; DO J=3,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,2; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
!	PROBD=1.0*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=3,3; DO J=3,3
	RES1=1.0
	END DO;END DO
	DO I=0,2; DO J=I,3
	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	END DO;END DO
	DO I=0,2; DO J=3,3
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==2) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	DO I=0,3; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!ちょっとおかしい
	RES1=1.0
	END DO;END DO
	RES2=1.0
	DO I=0,2; DO J=I,2
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	ELSE IF (RK==3) THEN
	DO I=0,3; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)	!ちょっとおかしい
	RES1=1.0
	END DO;END DO
	DO I=3,3; DO J=I,3
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
	RES2=1.0
	END DO;END DO
	DO I=0,2; DO J=3,3
	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
	END DO;END DO
	PROBD=RES1*RES2*RES3
	END IF

	ELSE IF(LK==3) THEN

	IF (RK==1) THEN
	PROBD=0.0
	ELSE IF (RK==2) THEN
	PROBD=0.0
	ELSE IF (RK==3) THEN
!	DO I=0,3; DO J=I,3
!	RES1=RES1+OCCU(I,1,K,TK)*PROBL(I,J,1,ZK)
!	DO I=0,3; DO J=I,3
!	RES2=RES2+OCCU(I,2,K,TK)*PROBL(I,J,2,ZK)
!	END DO;END DO
!	DO I=0,2; DO J=3,3
!	RES3=RES3+OCCU(I,3,K,TK)*PROBL(I,J,3,ZK)
!	END DO;END DO
!	PROB=RES1*RES2*RES3
      PROBD=1.0
	END IF
	END IF

		


	END IF
!	PRINT*,PROB,IK,JK,LK,RK,K
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	IF(JK==0) THEN
!	PROB=EXP(-THETAZERO*ZK)
!!	PRINT*,PROB,IK,JK,LK,RK,K
!	ELSE
!
!	PROB=0.0
!	RES2=1.0
!	DO 888 N=1,LMAX
!	IF(N==RK) CYCLE
!
!	RES1=0.0
!	IF(N < RK) THEN	!IF(A)
!
!	IF(N == LK) THEN	!IF(B)
!	DO Q=IK,JK
!	RES1=RES1+OCCU(IK,N,K,TK)*PROBL(IK,Q,N,ZK)
!	END DO
!	ELSE	!IF(B)
!	DO P=0,JK; DO Q=P,JK
!	RES1=RES1+OCCU(P,N,K,TK)*PROBL(P,Q,N,ZK)
!	END DO; END DO
!	END IF	!IF(B)
!
!	ELSE	!IF(A)
!
!	IF(N == LK) THEN	!IF(B)
!	DO Q=IK,JK-1
!	RES1=RES1+OCCU(IK,N,K,TK)*PROBL(IK,Q,N,ZK)
!	END DO
!	ELSE	!IF(B)
!	DO P=0,JK-1; DO Q=P,JK-1
!	RES1=RES1+OCCU(P,N,K,TK)*PROBL(P,Q,N,ZK)
!	END DO; END DO
!	END IF	!IF(B)

!	END IF	!IF(A)

!	RES2=RES2*RES1

!888	END DO

!	RES3=0.0
!	IF(LK==RK) THEN
!	RES3=PROBL(IK,JK,LK,ZK)
!	print*,PROBL(IK,JK,LK,ZK),IK,JK,LK
!	ELSE IF(LK < RK) THEN
!	DO P=0,JK-1
!	RES3=RES3+OCCU(P,RK,K,TK)*PROBL(P,JK,RK,ZK)
!	END DO
!	ELSE
!	DO P=0,JK
!	RES3=RES3+OCCU(P,RK,K,TK)*PROBL(P,JK,RK,ZK)
!	END DO
!	END IF
	
!	PROB=RES2*RES3

!	END IF

	RETURN; END FUNCTION

**********************************************************
*	個々の劣化タイプにおける推移確率行列の要素π_ij^l(Z)
**********************************************************
	REAL*8 FUNCTION PROBL(I,J,L,Z)
	USE VARIABLE;IMPLICIT NONE
	REAL*8,EXTERNAL:: PROD1
	INTEGER,INTENT(IN):: I,J,L
	REAL*8,INTENT(IN):: Z

	REAL*8 RESERVE
	INTEGER K
	
	PROBL=0.0
	IF(Z <= 1.0D-06) RETURN
	RESERVE=1.0
	DO K=I,J-1
		RESERVE=RESERVE*THETA(K,L)
	END DO
	DO K=I,J
		PROBL=PROBL+DEXP(-THETA(K,L)*Z)/PROD1(I,J,K,L)
	END DO
	PROBL=RESERVE*PROBL
	RETURN; END

**********************************
*	関数
**********************************
*(1)  PROD1 \prod_{e=a,\ne c}^{b} \frac{1}{\bar{theta}_{e,c}}
	REAL*8 Function PROD1(aa,bb,cc,L)
	USE VARIABLE;IMPLICIT NONE
	INTEGER,INTENT(IN):: aa,bb,cc,L
	INTEGER E

	PROD1=1.0
	DO E=aa,bb
		IF(E /= cc) PROD1=ETA(E,cc,L)*PROD1
	END DO
	RETURN;	END

********************************************************
*	初期時点の占有率
********************************************************
	SUBROUTINE MAKE_FOCCU(TK)
	USE VARIABLE; IMPLICIT NONE
	INTEGER,INTENT(IN):: TK
	REAL*8 TSAMPNL(IMAX+1)
	REAL*8 DOCCU(IMAX+1,LMAX,TOTALDATA,TMAX)
	REAL*8 DOCCUD(IMAX+1,LMAX,TOTALDATA,TMAX)
	INTEGER I,N,K
	INTEGER EK,FK,IK,JK,LK,RK
	INTEGER DNMAX	!観測できない劣化ランクの最大値
	REAL*8 PR1(IMAX+1)
	REAL*8 PR(IMAX+1,LMAX)
	REAL*8 ZK,W,RES,PD
	REAL*8,EXTERNAL:: RANSU1
	
	OCCU=0.0
!	DO I=0,IMAX; DO N=1,LMAX
!	TSAMPNL(I+1)=TSAMPN(I,N)
!	END DO; END DO

	OPEN(1,file=FILE1)
	READ(1,*) CH

	DO 55 K=1,TOTALDATA !データの読み込み
		!２時点間の劣化状態、点検間隔
		READ(1,*) EK,FK,ZK

!--------------------------------------------
!レーティングを劣化ランクとタイプに変換する
!--------------------------------------------
	IF(FK==0)THEN
			JK=0
		ELSE
			RK=MOD(FK+LMAX-1,LMAX)+1
			JK=(FK-RK)/(LMAX)+1
		END IF
	IF(EK==0)THEN !ランク０は特別
			IK=0;LK=RK				!--------------!要再考!----------------------
		ELSE
			LK=MOD(EK+LMAX-1,LMAX)+1
			IK=(EK-LK)/(LMAX)+1
	END IF
!	PRINT*,IK,JK,LK,RK,K
!--------------------------------------------

	IF(IK==0) THEN
	DO N=1,LMAX
	OCCU(0,N,K,TK)=1.0
	END DO
	GO TO 11
	END IF

!--------------------------------------------
!	占有率を求める
!--------------------------------------------
!      DO 88 W=1,100  !乱数発生回数
	DO 77 N=1,LMAX
	IF(LK==N) THEN
	OCCU(IK,LK,K,TK)=1.0
	GO TO 77
	END IF
	IF(N >= RK) THEN
	DNMAX=JK-1
	ELSE
	DNMAX=JK
	END IF
	PR1=0.0
	DO I=0,IMAX
	TSAMPNL(I+1)=TSAMPN(I,N)
	END DO
			CALL DM(PR1,TSAMPNL,DNMAX+1)

	DO I=1,DNMAX
	PR(I,N)=PR1(I)
	DOCCU(I,N,K,TK)=PR(I,N)
	DOCCUD(I,N,K,TK)=DOCCUD(I,N,K,TK)+PR(I,N)	!平均化操作用
	END DO
!--------------------------------------------
!	PRを確定的に与える場合
	RES=0.0
	PD=0.0
	W=RANSU1()
	DO I=1,IMAX
	DOCCU(I,N,K,TK)=0.0 !OCCUをゼロに戻す
	END DO
	DO I=1,DNMAX+1
	RES=RES+PR(I,N)
	END DO

			DO I=1,DNMAX+1
			PD=PD+PR(I,N)/RES
			IF(W <= PD) THEN
			DOCCU(I,N,K,TK)=1.0 
			EXIT
			END IF
			END DO

	DO I=1,DNMAX
	OCCU(I-1,N,K,TK)=DOCCU(I,N,K,TK)
!	PRINT*,OCCU(I-1,N,K),I,N,K
	END DO

77	END DO

!88    END DO
!-------------------------------------平均化操作！
!	DO N=1,LMAX
!	IF(LK==N) THEN
!	OCCU(IK-1,LK,K)=1.0
!	END IF
!	IF(N >= RK) THEN
!	DNMAX=JK-1
!	ELSE
!	DNMAX=JK
!	END IF
!	DO I=1,DNMAX
!	      OCCU(I-1,N,K)=DOCCUD(I,N,K)/100.0
!	END DO
!	END DO
!--------------------------------------	
11	CONTINUE

55	END DO
!	PRINT*,OCCU

	CLOSE(1)
	RETURN ;END SUBROUTINE
********************************************************
*	BETA(M,I,L)をTBETA(M,N)に変換する
********************************************************	
	SUBROUTINE TRANSITION_1(BETA,TBETA)
	USE VARIABLE; IMPLICIT NONE
	REAL*8,INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8,INTENT(OUT):: TBETA(1:MMAX,1:NMAX)
	INTEGER M,I,L

	DO M=1,MMAX; DO I=0,IMAX-1; DO L=1,LMAX
		TBETA(M,3*(L-1)+I+1)=BETA(M,I,L)
	END DO; END DO; END DO

	END SUBROUTINE TRANSITION_1

********************************************************
*	TBETA(M,N)をBETA(M,I,L)に変換する
********************************************************	
	SUBROUTINE TRANSITION_2(TBETA,BETA)
	USE VARIABLE; IMPLICIT NONE
	REAL*8,INTENT(OUT):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8,INTENT(IN)::TBETA(MMAX,NMAX)
	INTEGER M,I,L

	DO M=1,MMAX; DO I=0,IMAX-1; DO L=1,LMAX
		BETA(M,I,L)=TBETA(M,3*(L-1)+I+1)
	END DO; END DO; END DO

	END SUBROUTINE TRANSITION_2

*********************************************************
*	プリント用サブルーチン
*********************************************************
	SUBROUTINE PRINT1(BETA,SAMPBETA)		!ハザード関数，推移確率プリント用
	USE VARIABLE;IMPLICIT NONE
	REAL*8,EXTERNAL:: PROBD
	REAL*8,EXTERNAL:: PROBL
	REAL*8,EXTERNAL:: PROD1
	REAL*8,EXTERNAL:: PPP
	REAL*8,INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8,INTENT(IN):: SAMPBETA(1:MMAX,0:IMAX-1,1:LMAX,SAMPLENO)
	REAL*8:: XK(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8:: PRB(0:NMAX,0:NMAX,(NMAX+1)*(NMAX+1))
	INTEGER I,J,M,L,R,K,TT,EK,GK,FK,KK,II
	REAL*8 Z,AA,Z1,ZK1,Y,ZZZ
	REAL*8 ETI(0:IMAX)
	XK(1,0,1)=1.0
!	XK(2,0,1)=0.796437659	!構造平均
	XK(3,0,1)=0.661419446	!交通量平均
	XK(2,0,1)=0.0	!構造ダミー
!	XK(3,0,1)=0.4		

	Z1=0.001
	ZZZ=1.0

		DO M=1,MMAX
			XK(M,0,2)=XK(M,0,1)
			XK(M,0,3)=XK(M,0,1)
		END DO
		DO I=1,IMAX-1; DO L=1,LMAX; DO M=1,MMAX
			XK(M,I,L)=XK(M,0,1)
		END DO; END DO; END DO

	OPEN(1003,file=FILE1003)
	DO TT=1,50
	ZK1=TT-0.001
	EK=0
	DO FK=0,NMAX; DO GK=0,NMAX
	CALL MAKE_OCCU_PRINT(BETA,EK,FK,GK,XK,Z1,KK)
	IF(KK==1)THEN
	PRB(0,0,KK)=PROBD(0,0,0,0,ZK1,KK,2)
	ELSE IF(KK<11) THEN
	DO J=1,IMAX; DO R=1,LMAX
	CALL THETAVALUE(0,J,R,XK,BETA)
	PRB(0,3*(J-1)+R,KK)=PROBD(0,J,0,R,ZK1,KK,2)
	END DO; END DO
	ELSE
	DO I=1,IMAX; DO J=1,IMAX; DO L=1,LMAX; DO R=1,LMAX
	CALL THETAVALUE(0,J,L,XK,BETA)
	PRB(3*(I-1)+L,3*(J-1)+R,KK)=PROBD(I,J,L,R,ZK1,KK,2)
	END DO; END DO; END DO; END DO
	END IF
	END DO; END DO


	DO I=0,NMAX
!	PRINT*,(PRB(I,J),J=0,NMAX)
	WRITE(1003,10) (PRB(I,J,(IMAX*LMAX+1)*I+J+1),J=0,NMAX)
	END DO

	END DO
	CLOSE(1003)

	EK=0
	FK=0
!	DO GK=0,NMAX
!	CALL MAKE_OCCU_PRINT(BETA,EK,FK,GK,XK,Z1,KK)
	ETI=0.0
	DO I=0,IMAX-1
	DO Z=1,100000
	Y=Z/1000
!	DO II=0,I
	ETI(I)=ETI(I)+PPP(I,Y)/1000
!	PRINT*,ETI(I),PPP(II,Y),Y
!	END DO
	END DO
	END DO

	OPEN(9,file=FILE1009)
	DO L=1,LMAX
	DO I=0,IMAX
	WRITE(9,10) (PROBL(I,J,L,ZZZ),J=0,IMAX)
	END DO
	END DO
	CLOSE(9)

	OPEN(100,file=FILE100)
	WRITE(100,10) (ETI(I),I=0,IMAX)
	CLOSE(100)

	OPEN(1002,file=FILE1002)

	!Θ
	PRINT *, "ハザード関数"
	WRITE(1002,*) "ハザード関数"
	DO I=0,IMAX
	PRINT 10, (THETA(I,J),J=1,LMAX)
	WRITE(1002,10) (THETA(I,J),J=1,LMAX)
	END DO
	
 10	FORMAT(1X,999(F12.8,","),F12.8)
	CLOSE(1002)
	
	OPEN(1004,file=FILE1007)

	PRINT *,"期待寿命"
	DO I=0,IMAX
	PRINT 10, (1.0/THETA(I,J),J=1,LMAX)
	WRITE(1004,10) (1.0/THETA(I,J),J=1,LMAX)
	END DO

	CLOSE(1004)



	OPEN(2,file=FILE2)
	OPEN(3,file=FILE3)
	OPEN(4,file=FILE4)

	DO K=1,SAMPLENO-BURNIN
	WRITE(2,15) K,(SAMPBETA(M,0,1,K),M=1,MMAX),(SAMPBETA(M,1,1,K),M=1,MMAX)
     & ,(SAMPBETA(M,2,1,K),M=1,MMAX)
	WRITE(3,15) K,(SAMPBETA(M,0,2,K),M=1,MMAX),(SAMPBETA(M,1,2,K),M=1,MMAX)
     & ,(SAMPBETA(M,2,2,K),M=1,MMAX)
	WRITE(4,15) K,(SAMPBETA(M,0,3,K),M=1,MMAX),(SAMPBETA(M,1,3,K),M=1,MMAX)
     & ,(SAMPBETA(M,2,3,K),M=1,MMAX)
	END DO
 15	FORMAT(1X,I5,9(F10.6,","),F10.6)

	CLOSE(2)
	CLOSE(3)
	CLOSE(4)
	END SUBROUTINE


********************************************************
*	期待寿命算出用
********************************************************
	REAL*8 FUNCTION PPP(I,Y)
	USE VARIABLE;IMPLICIT NONE
	REAL*8,EXTERNAL:: PROBD
	INTEGER,INTENT(IN):: I
	REAL*8,INTENT(IN):: Y
	INTEGER R
	PPP=0.0
	IF(I==0) THEN
	PPP=PROBD(0,0,0,0,Y,1,2)
	ELSE 
	DO R=1,LMAX
	PPP=PPP+PROBD(0,I,0,R,Y,IMAX*(I-1)+R+1,2)
	END DO
	END IF
	RETURN; END

********************************************************
*	初期時点の占有率プリント用
********************************************************
	SUBROUTINE MAKE_OCCU_PRINT(BETA,EK,FK,GK,XK,ZK1,KK)
	USE VARIABLE; IMPLICIT NONE
	REAL*8, INTENT(IN):: BETA(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8, INTENT(IN):: XK(1:MMAX,0:IMAX-1,1:LMAX)
	REAL*8, INTENT(IN):: ZK1
	INTEGER, INTENT(IN):: EK
	INTEGER, INTENT(IN):: FK
	INTEGER, INTENT(IN):: GK
	INTEGER, INTENT(OUT):: KK
	INTEGER TK
	REAL*8 TSAMPNL(IMAX+1)
	INTEGER I,N,K,M,L
	INTEGER IK,JK,LK,RK,KOUHO
	INTEGER DNMAX	!観測できない劣化ランクの最大値
	INTEGER PRESAMP	!変更前の完備化されたランク
	REAL*8 LIKELY1,LIKELY2	!サンプリング過程用尤度
	REAL*8 PR1(IMAX+1)
	REAL*8 PR(0:IMAX,LMAX)
	REAL*8 ZK2,W,WW,RES,PD,RATE,AA
	REAL*8,EXTERNAL:: RANSU1
	REAL*8, EXTERNAL:: PROB
	REAL*8, EXTERNAL:: PROBL
	TK=2
!--------------------------------------------
!レーティングを劣化ランクとタイプに変換する
!--------------------------------------------
!	OCCU=0.0

	IF(GK==0)THEN
			JK=0
		ELSE
			RK=MOD(GK+LMAX-1,LMAX)+1
			JK=(GK-RK)/(LMAX)+1
		END IF
	IF(FK==0)THEN !ランク０は特別
			IK=0;LK=RK				!--------------!LK要再考!----------------------
		ELSE
			LK=MOD(FK+LMAX-1,LMAX)+1
			IK=(FK-LK)/(LMAX)+1
	END IF
	KK=(IMAX*LMAX+1)*FK+GK+1
!--------------------------------------------
	DO L=1,LMAX
		CALL THETAVALUE(0,JK,L,XK,BETA)
	END DO
	IF(IK==0) THEN	!初期健全度が０の場合-------------------------------
	DO N=1,LMAX
	DO I=1,IMAX
	OCCU(I,N,KK,TK)=0.0
	END DO
	OCCU(0,N,KK,TK)=1.0

	END DO
	GO TO 11
	END IF
					!初期健全度が０以外の場合---------------------------

!--------------------------------------------
!	占有率を求める
!--------------------------------------------
	DO 77 N=1,LMAX
	IF(LK==N) THEN
	OCCU(:,LK,KK,TK)=0.0
	OCCU(IK,LK,KK,TK)=1.0
	AA=0.0
	DO I=0,IMAX
	AA=AA+OCCU(I,N,KK,TK)
	END DO
	IF(AA/=1.0) PRINT*,KK,N,AA
	GO TO 77
	END IF

!	とり得るランクの最大値を決定
	IF(N > LK) THEN
	DNMAX=IK-1
	ELSE
	DNMAX=IK
	END IF
	DO I=0,DNMAX
	PR(I,N)=PROBL(0,I,N,ZK1)	!要一般化!---------------------------------------
	END DO

!--------------------------------------------
	RES=0.0
	PD=0.0

	DO I=0,DNMAX
	RES=RES+PR(I,N)
	END DO
	DO I=0,DNMAX
	OCCU(I,N,KK,TK)=PR(I,N)/RES
	END DO

77	END DO

11	CONTINUE


	RETURN ;END SUBROUTINE
	
****************************************************
*     ガンマ分布 (Wiki)
****************************************************
      subroutine gamma(x,k,te)
	REAL*8,INTENT(IN):: K,TE
	REAL*8,INTENT(OUT):: X
	REAL*8,EXTERNAL::RAN1
      integer idum
	real*8 v0,del,eps,nm
      data e /2.71828/

      del=k-int(k)
      if(del==0.0) then
	 eps=0.0

	else

      do
       u=ran1(idum)	!一様乱数発生
       v=ran1(idum)	!一様乱数発生

      v0=exp(1.0)/(exp(1.0)+del)
      if(u<=v0) then
	 eps=(u/v0)**(1.0/del)
	 nm=v*eps**(del-1.0)
	else
	 eps=1-log((u-v0)/(1-v0))
	 nm=v*exp(-eps)
	end if

	if(nm<=eps**(del-1.0) * exp(-eps)) exit
      end do


      end if
	sum=0.0
	do i=1,int(k)
	 sum=sum+log(ran1(idum))
	end do

	x=te*(eps-sum)

	return
	end subroutine

***************************************************
*     ディリクレ分布
***************************************************
      subroutine Dm(x,a,k)
      INTEGER,INTENT(IN):: k		!要素数
	REAL*8,INTENT(IN):: a(k)	!これでサンプル数を入れる
	REAL*8,INTENT(OUT):: x(k)		!これで分布を返す
	INTEGER I
	REAL*8 y(k),b,c
	real*8 gene,sum
      sum=0.0
      do i=1,k
	 b=a(i)
	 c=1.0
       call gamma(gene,B,c)
       y(i)=gene
	 sum=sum+y(i)
	end do
      do i=1,k
	 x(i)=y(i)/sum
	end do

	return
	end

***************************************************
*     一様分布乱数発生
***************************************************
	FUNCTION ran1(idum)
	INTEGER idum,ia,im,iq,ir,ntab,ndiv
	REAL*8 ran1,am,eps,rnmx
	PARAMETER (ia=16807,im=2147483647,am=1./im,
     &iq=127773,ir=2836,ntab=32,ndiv=1+(im-1)/ntab,
     &eps=1.2e-7,rnmx=1.-eps)
	INTEGER j,k,iv(ntab),iy
	SAVE iv,iy
	DATA iv /ntab*0/, iy /0/
	if (idum<=0.or.iy==0) then
	  idum=max(-idum,1)
	  do j=ntab+8,1,-1
	    k=idum/iq
	    idum=ia*(idum-k*iq)-ir*k
	    if (idum<0) idum=idum+im
	    if (j<=ntab) iv(j)=idum
	  end do
	  iy=iv(1)
	endif
	k=idum/iq
	idum=ia*(idum-k*iq)-ir*k
	if (idum<0) idum=idum+im
	j=1+iy/ndiv
	iy=iv(j)
	iv(j)=idum
	ran1=min(am*iy,rnmx)
	END FUNCTION ran1

***************************************************
*	疑似一様乱数の発生（乗算合同式法）
***************************************************
	REAL*8 FUNCTION RANSU1()
	INTEGER IR1
	COMMON /IRAND1/IR1
		IR1=IAND(48828125*IR1, 2147483647)
		RANSU1=DBLE(IR1)/DBLE(2147483647)
	END FUNCTION

***************************************************
*     正規分布からの乱数発生(Box-Muller，渋谷改良版)
***************************************************
	REAL*8 FUNCTION RSEIKI(MYU,SIGMA)
	IMPLICIT NONE
	REAL*8,INTENT(IN):: MYU, SIGMA
	INTEGER ISET
	REAL*8 FAC,GSET,RSQ,V1,V2
	SAVE ISET, GSET
	DATA ISET/0/
	REAL*8,EXTERNAL:: RANSU2

	IF (ISET==0) THEN
		DO
			V1 = 2.0*RANSU2()-1.0;	V2 = 2.0*RANSU2()-1.0
			RSQ = V1**2+V2**2
			IF(.NOT.(RSQ>=1.0 .OR. RSQ==0.)) EXIT
		END DO
		FAC=DSQRT(-2.0*DLOG(RSQ)/RSQ)
		GSET = V1*FAC
		RSEIKI = V2*FAC
		ISET = 1
	ELSE
		RSEIKI = GSET
		ISET = 0
	END IF
	RSEIKI=RSEIKI*SIGMA+MYU

	RETURN;	END FUNCTION
***************************************************
*	疑似一様乱数の発生（マルチ乗算合同式法：AS183）
!	周期が長い
***************************************************
	REAL*8 FUNCTION RANSU2()
!	乱数の種はいずれも1から30000の範囲で与えなければいけない
	INTEGER IX,IY,IZ
	COMMON /IRAND2/IX,IY,IZ

		IX=171*MOD(IX,177)-2*(IX/177)
		IY=172*MOD(IY,176)-35*(IY/176)
		IZ=170*MOD(IZ,178)-63*(IZ/178)

		IF(IX < 0) IX=IX+30269
		IF(IY < 0) IY=IY+30307
		IF(IZ < 0) IZ=IZ+30323
	   
		RANSU2=AMOD(FLOAT(IX)/30269.0+FLOAT(IY)/30307.0
     &		+FLOAT(IZ)/30323.0, 1.0)
	RETURN;	END FUNCTION

*******************************************************
*     定常分布への収束判定（GEWEKEの仮説検定）
*******************************************************
	REAL FUNCTION GEWEKEZ(SAMP,NPOINT)
	IMPLICIT NONE
	REAL*8,EXTERNAL:: TVORA
	INTEGER,INTENT(IN):: NPOINT ! 標本数
	REAL*8,INTENT(IN):: SAMP(NPOINT)	!標本集合
	INTEGER NP1, NP2
	REAL*8 SAMP1(NPOINT/10), SAMP2(NPOINT/50)
	REAL*8 MYU1,MYU2,S1,S2
	REAL*8 Z	! 検定統計量
	INTEGER I
	CHARACTER CH

		NP1=NPOINT/10; NP2=NPOINT/50
		DO I=1, NP1; SAMP1(I)=SAMP(I); END DO
		DO I=1, NP2; SAMP2(I)=SAMP(I+NP2); END DO

		MYU1=0.0
		DO I=1,NP1; MYU1=MYU1+SAMP1(I);	END DO
		MYU1 = MYU1 / NP1
		S1=TVORA(SAMP1,MYU1,NP1) 
		
		MYU2=0.0
		DO I=1,NP2; MYU2=MYU2+SAMP2(I);	END DO
		MYU2 = MYU2 / NP2
		S2=TVORA(SAMP2,MYU2,NP2)
		
		GEWEKEZ=DABS((MYU1-MYU2) / SQRT(S1/NP1 + S2/NP2))

	RETURN
	END FUNCTION GEWEKEZ
*****************************************
*	標本分散の計算（時系列）
! 参考文献
! A Simple, Positive Semi-Definite, Heteroskedasticity
!	and Autocorrelation Consistent Covariance Matrix
*****************************************
	REAL*8 FUNCTION TVORA(SAMPX,MYU,NN)
	IMPLICIT NONE
	INTEGER,INTENT(IN):: NN
	REAL*8,INTENT(IN):: SAMPX(NN),MYU
	INTEGER I,J,M

		M = 10	! バンド幅
		TVORA= OMEGA(0)
		DO J=1, M
			TVORA = TVORA + (1.0 - DBLE(J)/(M+1.0))*2.0*OMEGA(J)
		END DO
	CONTAINS
!--------------------
*	内部手続き
!--------------------
		REAL*8 FUNCTION OMEGA(S)
		IMPLICIT NONE
		INTEGER,INTENT(IN):: S
		INTEGER K
			OMEGA=0.0
			DO K = S + 1, NN
				OMEGA=OMEGA +(SAMPX(K)-MYU)*(SAMPX(K-S)-MYU)
			END DO
			OMEGA = OMEGA / NN
		END FUNCTION
!---------------------------------------------------------
	END FUNCTION TVORA
